@import '../../bower_components/bootstrap/scss/mixins/resize';

@mixin input-focus($input-focus-box-shadow: none) {
  &:focus {
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    color: $input-focus-color;
    outline: none;

    @if $input-focus-box-shadow {
      box-shadow: $input-focus-box-shadow;
    }
  }
}

@mixin input($input-box-shadow: none) {
  background-clip: padding-box;
  background-color: $input-bg;
  // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214.
  background-image: none;
  border: $input-border-width solid $input-border-color;
  color: $input-color;
  display: block;
  // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: $input-padding-y $input-padding-x;
  width: 100%;
  border-radius: $input-border-radius;

  height: $input-height;

  @if $input-box-shadow {
    &,
    &:hover,
    &:focus,
    &:active {
      box-shadow: $input-box-shadow;
    }
  }

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  @include input-focus($input-box-shadow);

  // Placeholder
  &::placeholder {
    color: transparentize($input-placeholder-color, .5);
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled {
    background-color: $input-disabled-bg;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  &[readonly] {
    background-color: transparentize($green, .8);
    border-color: transparent;
    color: $green;
    opacity: 1;
  }
  //
  //&.valid {
  //  border-color: $color-success;
  //}
  //
  //&.invalid {
  //  background-color: $input-error-bg;
  //  border-color: $input-error-border-color;
  //  color: $input-error-color;
  //
  //  @if $input-box-shadow {
  //    box-shadow: $input-error-box-shadow;
  //  }
  //}
}

@mixin textarea() {
  @include input();
  height: auto;
  //padding: $input-padding-y $input-padding-x;

  @if ($textarea-resizable) {
    @include resizable($textarea-resizable-direction);
  } @else {
    resize: none;
  }
}
